{"version":3,"sources":["../../src/common/WiggleGameEngine.js"],"names":["WiggleGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","autoResolve","on","moveAll","bind","Object","assign","foodRadius","headRadius","bodyRadius","eyeDist","eyeRadius","eyeAngle","spaceWidth","spaceHeight","moveDist","foodCount","eatDistance","collideDistance","startBodyLength","aiCount","directionStop","serializer","registerClass","Wiggle","Food","x","Math","random","y","TwoVector","stepInfo","isReenact","world","forEachObject","id","obj","pos","position","clone","bodyParts","length","subtract","push","bodyLength","shift","direction","move","cos","sin","multiplyScalar","add","min","max","inputData","playerId","player","queryObject","input","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Wiggle from './Wiggle';\nimport Food from './Food';\n\nexport default class WiggleGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({\n            gameEngine: this,\n            collisions: { autoResolve: false }\n        });\n        this.on('preStep', this.moveAll.bind(this));\n\n        // game variables\n        Object.assign(this, {\n            foodRadius: 0.1, headRadius: 0.15, bodyRadius: 0.1,\n            eyeDist: 0.08, eyeRadius: 0.03, eyeAngle: 0.5,\n            spaceWidth: 16, spaceHeight: 9, moveDist: 0.06,\n            foodCount: 16, eatDistance: 0.3, collideDistance: 0.3,\n            startBodyLength: 10, aiCount: 0, directionStop: 100\n        });\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Wiggle);\n        serializer.registerClass(Food);\n    }\n\n    start() {\n        super.start();\n    }\n\n    randPos() {\n        let x = (Math.random() - 0.5) * this.spaceWidth;\n        let y = (Math.random() - 0.5) * this.spaceHeight;\n        return new TwoVector(x, y);\n    }\n\n    moveAll(stepInfo) {\n\n        if (stepInfo.isReenact)\n            return;\n\n        this.world.forEachObject((id, obj) => {\n            if (obj instanceof Wiggle) {\n\n                // if the position changed, add a body part and trim the length\n                let pos = obj.position.clone();\n                if (obj.bodyParts.length === 0 || pos.subtract(obj.bodyParts[obj.bodyParts.length-1]).length() > 0.05) {\n                    obj.bodyParts.push(obj.position.clone());\n                    while (obj.bodyLength < obj.bodyParts.length) obj.bodyParts.shift();\n                }\n\n                // if not stopped, move along\n                if (obj.direction === this.directionStop) return;\n                let move = new TwoVector(Math.cos(obj.direction), Math.sin(obj.direction));\n                move.multiplyScalar(0.05);\n                obj.position.add(move);\n                obj.position.y = Math.min(obj.position.y, this.spaceHeight / 2);\n                obj.position.y = Math.max(obj.position.y, -this.spaceHeight / 2);\n                obj.position.x = Math.min(obj.position.x, this.spaceWidth / 2);\n                obj.position.x = Math.max(obj.position.x, -this.spaceWidth / 2);\n            }\n        });\n    }\n\n    processInput(inputData, playerId) {\n\n        super.processInput(inputData, playerId);\n\n        // get the player's primary object\n        let player = this.world.queryObject({ playerId });\n        if (player) {\n            player.direction = inputData.input;\n        }\n    }\n}\n"],"file":"WiggleGameEngine.js"}