{"version":3,"sources":["../../src/server/WiggleServerEngine.js"],"names":["WiggleServerEngine","io","gameEngine","inputOptions","on","stepLogic","bind","f","foodCount","newF","Food","position","randPos","addObjectToWorld","ai","aiCount","addAI","newAI","Wiggle","AI","direction","turnDirection","bodyLength","startBodyLength","playerId","socket","player","socketId","playerWiggle","world","queryObject","removeObjectFromWorld","id","w","objects","w1","w2","wiggles","queryObjects","instanceType","foodObjects","i","bodyParts","length","distance","clone","subtract","collideDistance","wiggleHitWiggle","eatDistance","wiggleEatFood","Math","random","y","spaceHeight","PI","x","spaceWidth","ServerEngine"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,kB;;;AAEjB,8BAAYC,EAAZ,EAAgBC,UAAhB,EAA4BC,YAA5B,EAA0C;AAAA;;AAAA;;AACtC,4FAAMF,EAAN,EAAUC,UAAV,EAAsBC,YAAtB;;AACA,UAAKD,UAAL,CAAgBE,EAAhB,CAAmB,UAAnB,EAA+B,MAAKC,SAAL,CAAeC,IAAf,+BAA/B;;AAFsC;AAGzC,G,CAED;;;;;4BACQ;AACJ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,UAAL,CAAgBM,SAApC,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAIE,IAAI,GAAG,IAAIC,gBAAJ,CAAS,KAAKR,UAAd,EAA0B,IAA1B,EAAgC;AAAES,UAAAA,QAAQ,EAAE,KAAKT,UAAL,CAAgBU,OAAhB;AAAZ,SAAhC,CAAX;AACA,aAAKV,UAAL,CAAgBW,gBAAhB,CAAiCJ,IAAjC;AACH;;AACD,WAAK,IAAIK,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG,KAAKZ,UAAL,CAAgBa,OAAtC,EAA+CD,EAAE,EAAjD;AACI,aAAKE,KAAL;AADJ;AAEH;;;4BAEO;AACJ,UAAIC,KAAK,GAAG,IAAIC,kBAAJ,CAAW,KAAKhB,UAAhB,EAA4B,IAA5B,EAAkC;AAAES,QAAAA,QAAQ,EAAE,KAAKT,UAAL,CAAgBU,OAAhB;AAAZ,OAAlC,CAAZ;AACAK,MAAAA,KAAK,CAACE,EAAN,GAAW,IAAX;AACAF,MAAAA,KAAK,CAACG,SAAN,GAAkB,CAAlB;AACAH,MAAAA,KAAK,CAACI,aAAN,GAAsB,CAAtB;AACAJ,MAAAA,KAAK,CAACK,UAAN,GAAmB,KAAKpB,UAAL,CAAgBqB,eAAnC;AACAN,MAAAA,KAAK,CAACO,QAAN,GAAiB,CAAjB;AACA,WAAKtB,UAAL,CAAgBW,gBAAhB,CAAiCI,KAAjC;AACH;;;sCAEiBQ,M,EAAQ;AACtB,gGAAwBA,MAAxB;;AACA,UAAIC,MAAM,GAAG,IAAIR,kBAAJ,CAAW,KAAKhB,UAAhB,EAA4B,IAA5B,EAAkC;AAAES,QAAAA,QAAQ,EAAE,KAAKT,UAAL,CAAgBU,OAAhB;AAAZ,OAAlC,CAAb;AACAc,MAAAA,MAAM,CAACN,SAAP,GAAmB,CAAnB;AACAM,MAAAA,MAAM,CAACJ,UAAP,GAAoB,KAAKpB,UAAL,CAAgBqB,eAApC;AACAG,MAAAA,MAAM,CAACF,QAAP,GAAkBC,MAAM,CAACD,QAAzB;AACA,WAAKtB,UAAL,CAAgBW,gBAAhB,CAAiCa,MAAjC;AACH;;;yCAEoBC,Q,EAAUH,Q,EAAU;AACrC,mGAA2BG,QAA3B,EAAqCH,QAArC;;AACA,UAAII,YAAY,GAAG,KAAK1B,UAAL,CAAgB2B,KAAhB,CAAsBC,WAAtB,CAAkC;AAAEN,QAAAA,QAAQ,EAARA;AAAF,OAAlC,CAAnB;AACA,UAAII,YAAJ,EAAkB,KAAK1B,UAAL,CAAgB6B,qBAAhB,CAAsCH,YAAY,CAACI,EAAnD;AACrB,K,CAED;AACA;;;;kCACcC,C,EAAG1B,C,EAAG;AAChB,UAAI,EAAEA,CAAC,CAACyB,EAAF,IAAQ,KAAK9B,UAAL,CAAgB2B,KAAhB,CAAsBK,OAAhC,CAAJ,EACI;AAEJD,MAAAA,CAAC,CAACX,UAAF;AACA,WAAKpB,UAAL,CAAgB6B,qBAAhB,CAAsCxB,CAAtC;AACA,UAAIE,IAAI,GAAG,IAAIC,gBAAJ,CAAS,KAAKR,UAAd,EAA0B,IAA1B,EAAgC;AAAES,QAAAA,QAAQ,EAAE,KAAKT,UAAL,CAAgBU,OAAhB;AAAZ,OAAhC,CAAX;AACA,WAAKV,UAAL,CAAgBW,gBAAhB,CAAiCJ,IAAjC;AACH;;;oCAEe0B,E,EAAIC,E,EAAI;AACpB,UAAI,EAAEA,EAAE,CAACJ,EAAH,IAAS,KAAK9B,UAAL,CAAgB2B,KAAhB,CAAsBK,OAAjC,KAA6C,EAAEC,EAAE,CAACH,EAAH,IAAS,KAAK9B,UAAL,CAAgB2B,KAAhB,CAAsBK,OAAjC,CAAjD,EACI;AAEJ,WAAKhC,UAAL,CAAgB6B,qBAAhB,CAAsCI,EAAtC;AACA,UAAIA,EAAE,CAAChB,EAAP,EAAW,KAAKH,KAAL;AACd;;;gCAEW;AACR,UAAIqB,OAAO,GAAG,KAAKnC,UAAL,CAAgB2B,KAAhB,CAAsBS,YAAtB,CAAmC;AAAEC,QAAAA,YAAY,EAAErB;AAAhB,OAAnC,CAAd;AACA,UAAIsB,WAAW,GAAG,KAAKtC,UAAL,CAAgB2B,KAAhB,CAAsBS,YAAtB,CAAmC;AAAEC,QAAAA,YAAY,EAAE7B;AAAhB,OAAnC,CAAlB;AAFQ;AAAA;AAAA;;AAAA;AAGR,6BAAc2B,OAAd,8HAAuB;AAAA,cAAdJ,CAAc;AAEnB;AAFmB;AAAA;AAAA;;AAAA;AAGnB,kCAAeI,OAAf,mIAAwB;AAAA,kBAAfD,EAAe;AACpB,kBAAIH,CAAC,KAAKG,EAAV,EACI;;AAEJ,mBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACM,SAAH,CAAaC,MAAjC,EAAyCF,CAAC,EAA1C,EAA8C;AAC1C,oBAAIG,QAAQ,GAAGR,EAAE,CAACM,SAAH,CAAaD,CAAb,EAAgBI,KAAhB,GAAwBC,QAAxB,CAAiCb,CAAC,CAACtB,QAAnC,CAAf;AACA,oBAAIiC,QAAQ,CAACD,MAAT,KAAoB,KAAKzC,UAAL,CAAgB6C,eAAxC,EACI,KAAKC,eAAL,CAAqBf,CAArB,EAAwBG,EAAxB;AACP;AACJ,aAZkB,CAcnB;;AAdmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAenB,kCAAcI,WAAd,mIAA2B;AAAA,kBAAlBjC,CAAkB;;AACvB,kBAAIqC,SAAQ,GAAGX,CAAC,CAACtB,QAAF,CAAWkC,KAAX,GAAmBC,QAAnB,CAA4BvC,CAAC,CAACI,QAA9B,CAAf;;AACA,kBAAIiC,SAAQ,CAACD,MAAT,KAAoB,KAAKzC,UAAL,CAAgB+C,WAAxC,EAAqD;AACjD,qBAAKC,aAAL,CAAmBjB,CAAnB,EAAsB1B,CAAtB;AACH;AACJ,aApBkB,CAsBnB;;AAtBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBnB,cAAI0B,CAAC,CAACd,EAAN,EAAU;AACN,gBAAIgC,IAAI,CAACC,MAAL,KAAgB,IAApB,EAA0BnB,CAAC,CAACZ,aAAF,IAAmB,CAAC,CAApB;AAC1BY,YAAAA,CAAC,CAACb,SAAF,IAAea,CAAC,CAACZ,aAAF,IAAmB8B,IAAI,CAACC,MAAL,KAAgB,GAAnC,IAAwC,EAAvD;AACA,gBAAInB,CAAC,CAACtB,QAAF,CAAW0C,CAAX,IAAgB,KAAKnD,UAAL,CAAgBoD,WAAhB,GAA8B,CAAlD,EAAqDrB,CAAC,CAACb,SAAF,GAAc,CAAC+B,IAAI,CAACI,EAAN,GAAS,CAAvB;AACrD,gBAAItB,CAAC,CAACtB,QAAF,CAAW0C,CAAX,IAAgB,CAAC,KAAKnD,UAAL,CAAgBoD,WAAjB,GAA+B,CAAnD,EAAsDrB,CAAC,CAACb,SAAF,GAAc+B,IAAI,CAACI,EAAL,GAAQ,CAAtB;AACtD,gBAAItB,CAAC,CAACtB,QAAF,CAAW6C,CAAX,IAAgB,KAAKtD,UAAL,CAAgBuD,UAAhB,GAA6B,CAAjD,EAAoDxB,CAAC,CAACb,SAAF,GAAc+B,IAAI,CAACI,EAAnB;AACpD,gBAAItB,CAAC,CAACtB,QAAF,CAAW6C,CAAX,IAAgB,CAAC,KAAKtD,UAAL,CAAgBuD,UAAjB,GAA8B,CAAlD,EAAqDxB,CAAC,CAACb,SAAF,GAAc,CAAd;AACrD,gBAAIa,CAAC,CAACb,SAAF,GAAc+B,IAAI,CAACI,EAAL,GAAU,CAA5B,EAA+BtB,CAAC,CAACb,SAAF,IAAe+B,IAAI,CAACI,EAAL,GAAU,CAAzB;AAC/B,gBAAItB,CAAC,CAACb,SAAF,GAAc,CAAlB,EAAqBa,CAAC,CAACb,SAAF,IAAe+B,IAAI,CAACI,EAAL,GAAU,CAAzB;AACxB;AACJ;AApCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCX;;;;EApG2CG,qB","sourcesContent":["import { ServerEngine } from 'lance-gg';\nimport Wiggle from '../common/Wiggle';\nimport Food from '../common/Food';\n\nexport default class WiggleServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n        this.gameEngine.on('postStep', this.stepLogic.bind(this));\n    }\n\n    // create food and AI robots\n    start() {\n        super.start();\n        for (let f = 0; f < this.gameEngine.foodCount; f++) {\n            let newF = new Food(this.gameEngine, null, { position: this.gameEngine.randPos() });\n            this.gameEngine.addObjectToWorld(newF);\n        }\n        for (let ai = 0; ai < this.gameEngine.aiCount; ai++)\n            this.addAI();\n    }\n\n    addAI() {\n        let newAI = new Wiggle(this.gameEngine, null, { position: this.gameEngine.randPos() });\n        newAI.AI = true;\n        newAI.direction = 0;\n        newAI.turnDirection = 1;\n        newAI.bodyLength = this.gameEngine.startBodyLength;\n        newAI.playerId = 0;\n        this.gameEngine.addObjectToWorld(newAI);\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n        let player = new Wiggle(this.gameEngine, null, { position: this.gameEngine.randPos() });\n        player.direction = 0;\n        player.bodyLength = this.gameEngine.startBodyLength;\n        player.playerId = socket.playerId;\n        this.gameEngine.addObjectToWorld(player);\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        let playerWiggle = this.gameEngine.world.queryObject({ playerId });\n        if (playerWiggle) this.gameEngine.removeObjectFromWorld(playerWiggle.id);\n    }\n\n    // Eating Food:\n    // increase body length, and remove the food\n    wiggleEatFood(w, f) {\n        if (!(f.id in this.gameEngine.world.objects))\n            return;\n\n        w.bodyLength++;\n        this.gameEngine.removeObjectFromWorld(f);\n        let newF = new Food(this.gameEngine, null, { position: this.gameEngine.randPos() });\n        this.gameEngine.addObjectToWorld(newF);\n    }\n\n    wiggleHitWiggle(w1, w2) {\n        if (!(w2.id in this.gameEngine.world.objects) || !(w1.id in this.gameEngine.world.objects))\n            return;\n\n        this.gameEngine.removeObjectFromWorld(w1);\n        if (w1.AI) this.addAI();\n    }\n\n    stepLogic() {\n        let wiggles = this.gameEngine.world.queryObjects({ instanceType: Wiggle });\n        let foodObjects = this.gameEngine.world.queryObjects({ instanceType: Food });\n        for (let w of wiggles) {\n\n            // check for collision\n            for (let w2 of wiggles) {\n                if (w === w2)\n                    continue;\n\n                for (let i = 0; i < w2.bodyParts.length; i++) {\n                    let distance = w2.bodyParts[i].clone().subtract(w.position);\n                    if (distance.length() < this.gameEngine.collideDistance)\n                        this.wiggleHitWiggle(w, w2);\n                }\n            }\n\n            // check for food-eating\n            for (let f of foodObjects) {\n                let distance = w.position.clone().subtract(f.position);\n                if (distance.length() < this.gameEngine.eatDistance) {\n                    this.wiggleEatFood(w, f);\n                }\n            }\n\n            // move AI wiggles\n            if (w.AI) {\n                if (Math.random() < 0.01) w.turnDirection *= -1;\n                w.direction += w.turnDirection * (Math.random() - 0.9)/20;\n                if (w.position.y >= this.gameEngine.spaceHeight / 2) w.direction = -Math.PI/2;\n                if (w.position.y <= -this.gameEngine.spaceHeight / 2) w.direction = Math.PI/2;\n                if (w.position.x >= this.gameEngine.spaceWidth / 2) w.direction = Math.PI;\n                if (w.position.x <= -this.gameEngine.spaceWidth / 2) w.direction = 0;\n                if (w.direction > Math.PI * 2) w.direction -= Math.PI * 2;\n                if (w.direction < 0) w.direction += Math.PI * 2;\n            }\n        }\n    }\n}\n"],"file":"WiggleServerEngine.js"}